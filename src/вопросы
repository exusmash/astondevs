### Java Collections:

1. Какова основная разница между интерфейсами `List`, `Set` и `Map` в Java? Какие реализации этих интерфейсов вы знаете?
2. Объясните принцип работы Hash-таблицы в Java. Какие методы влияют на производительность при работе с HashMap?
3. Какова иерархия интерфейсов коллекций в Java? Какие основные методы определены в интерфейсе `Collection`?
4. Расскажите о принципе работы и применении `LinkedList` в сравнении с `ArrayList`.
5. Что такое Big O нотация? Какова сложность основных операций (`add`, `remove`, `contains`) для ArrayList и LinkedList?
6. Как работает и что означает "fail-fast" в контексте коллекций в Java?
7. Как использовать `Comparator` для сортировки коллекции в Java? Приведите пример.
8. Что такое "синхронизированные" и "несинхронизированные" коллекции в Java?
9. Как использовать `Stream API` для манипуляции данными в коллекциях? Приведите пример.
10. Когда вы предпочли бы использовать `HashSet` вместо `TreeSet` и наоборот?

### Алгоритмы сортировки:

1. Объясните принцип работы алгоритма сортировки QuickSort. Какова его средняя и худшая сложность?
2. Каков принцип сортировки слиянием (Merge Sort)? Какие преимущества у этого алгоритма?
3. В чем разница между стабильными и нестабильными алгоритмами сортировки? Приведите примеры.
4. Какова сложность сортировки массива методом выбора (Selection Sort) и методом вставки (Insertion Sort)?
5. Как выбрать подходящий алгоритм сортировки в зависимости от размера массива или коллекции?
6. Какие существуют встроенные методы сортировки в Java? Какие типы данных они могут сортировать?
7. Объясните понятие "устойчивость" сортировки. Почему это важно?
8. Какие могут быть проблемы при сортировке больших объемов данных? Как их можно решить?
9. В чем преимущества и недостатки использования сортировки слиянием по сравнению с QuickSort?
10. Как улучшить производительность сортировки массива, если большинство его элементов уже отсортированы?

### Структуры данных, Git:

1. Какие основные структуры данных вы знаете? Когда бы вы использовали массив, а когда связанный список?
2. Что такое хеш-таблица и каковы ее применения? Как решаются коллизии в хеш-таблицах?
3. Как работает стек и очередь? Приведите примеры сценариев их использования.
4. Что такое деревья и графы? Какова разница между бинарным деревом и бинарным поиском деревом?
5. Как работает система контроля версий Git? Как создать ветку (branch) и выполнить слияние (merge)?
6. Какие основные преимущества Git перед другими системами контроля версий?
7. Что такое конфликты слияния в Git и как их разрешить?
8. Как добавить изменения в удаленный репозиторий с использованием Git?
9. Как использовать команду `git rebase` и в чем заключаются ее преимущества?
10. Как можно отменить последний коммит в Git? Как отменить все незакоммиченные изменения в рабочем каталоге?